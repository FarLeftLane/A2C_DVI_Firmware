;  MIT License
;  
;  Copyright (c) 2025 Michael Neil, Far Left Lane
;  
;  Permission is hereby granted, free of charge, to any person obtaining a copy
;  of this software and associated documentation files (the "Software"), to deal
;  in the Software without restriction, including without limitation the rights
;  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
;  copies of the Software, and to permit persons to whom the Software is
;  furnished to do so, subject to the following conditions:
;  
;  The above copyright notice and this permission notice shall be included in all
;  copies or substantial portions of the Software.
;  
;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
;  SOFTWARE.


.pio_version 0 // only requires PIO version 0

.program a2c_snd_input

; Read 1VSND at full rate.
; - Autopush is enabled, threshold 32

public entry_point:
.wrap_target
in pins, 1
.wrap

% c-sdk {
static inline void a2c_snd_input_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config c = a2c_snd_input_program_get_default_config(offset);

    // Set the IN base pin to the provided `pin` parameter. This is the data pin
    sm_config_set_in_pins(&c, pin);
    // Set the pin directions to input at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
    // Connect these GPIOs to this PIO block
    pio_gpio_init(pio, pin);                //  1VSND

    // Shifting to right matches the format that the hires decode tables need
    sm_config_set_in_shift(
        &c,
        false, // shift_right = true to shift ISR to right, false to shift ISR to left
        true,  // Autopush enabled
        32     // Autopush threshold = 32
    );

    // We only receive, so disable the TX FIFO to make the RX FIFO deeper.
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);

    //  Set the clock div to (FIXME) the DVI/System Clock divided by 32 x 44100
    float dvi_clock = 270000 * 1000;
    float snd_clock = (44100 * 32);
    float clock_div = dvi_clock / snd_clock;

    sm_config_set_clkdiv(&c, clock_div);

    // Load our configuration, and start the program from the beginning
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}